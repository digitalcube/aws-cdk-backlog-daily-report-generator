import 'isomorphic-form-data';
import 'isomorphic-fetch';
import { Handler } from 'aws-lambda'
import * as backlogjs from 'backlog-js';
import { SSMClient, GetParameterCommand } from "@aws-sdk/client-ssm";
import { BedrockRuntimeClient, ConverseCommand } from "@aws-sdk/client-bedrock-runtime";
import { BacklogActivityService } from './daily-report-generator/index.js';
import { APP_CONFIG, Member } from './config.js';

const ssmClient = new SSMClient();
const bedrockClient = new BedrockRuntimeClient();

export const generateDailyReport = async (backlog: backlogjs.Backlog, member: Member, date: Date) => {

    const activityService = new BacklogActivityService(backlog);
    // 第二引数は YYYY-MM-DD の形式
    const result = await activityService.getMeaningfulActivities(member.id, date.toISOString().split('T')[0]);
    /**
     * @TODO
     * 暫定措置
     * プロジェクトごとのカスタムステータスに対応できない
     * プロジェクトごとに収集する仕組みを検討すべき
     */
    const statusResponse = await backlog.getProjectStatuses(APP_CONFIG.dailyReports.projectId);
    const statuses = statusResponse.map(status => ({
        id: status.id,
        name: status.name,
        projectId: status.projectId,
    }))
    
    console.log(result);
    if (result.activities.length < 1) {
        return {
            statusCode: 200,
            output: {
                message: '活動がありません'
            }
        }
    }
    
    const command = new ConverseCommand({ 
        modelId: "apac.amazon.nova-pro-v1:0", 
        inferenceConfig: {
            maxTokens: 5000,
            temperature: 0.2,
            topP: 0.2,
        },
        messages: [
            {
            role: "user", 
            content: [
                {
                    text: result.report
                }
            ]
            }
        ],
        system: [
            {
            text: `あなたは各メンバーの秘書です。Backlogチケット管理ツールのデータをもとに、実践的で改善につながる日報を作成するのが業務です。

## 入力データについて
・提供されるレポートには、当日更新されたチケット情報が含まれています
・チケットには、タスク内容、コメント、ステータス変更などの情報が含まれています
・同じプロジェクト内の関連チケット情報も参考にしてください

### プロジェクトごとの状態・ステータス
以下のJSONデータは、プロジェクトごとの状態・ステータスです。
${JSON.stringify(statuses, null, 2)}
レポートに記載されている id に対応した status nameを生成内容に記載してください。
対応するものがない場合は、idをそのまま記載しましょう。

## 生成する内容すべき内容
・業務内容 (Fact)を整理して列挙します
・必ずBacklogのチケットキーを先頭に付与します（例: EST-1234 / AMIMOTO-9878）
・当日作業した内容を簡潔に箇条書きで記載します
・作業時間が長いものや優先度の高いものを上位に記載します
・${member.name}さん以外のメンバーによる作業やコメントなどは記載しません
・他のメンバーの名前を出すときは、「XXさん」のように敬称をつけてください
・社外の方の名前や企業名だと判断した場合は、「XX様」にしてください

※各セクションは事実に基づいて記載し、推測は最小限に抑えてください。レポートに含まれない項目については空欄としてください。`
            }
        ]
    });
    const { output } = await bedrockClient.send(command);
    console.log(JSON.stringify(output, null, 2));
    if (!output) {
        throw new Error('出力がありません');
    }
    const content = output.message?.content?.[0]?.text ?? "";
    if (!content) {
        throw new Error('出力がありません');
    }

    // Backlog SDKを利用して、日報をチケットにする
    const generateIssueResult = await backlog.postIssue({
        projectId: APP_CONFIG.dailyReports.projectId,
        summary: `[${member.name}] 日報 [${date.getMonth() + 1}/${date.getDate()}]`,
        description: `
${content}

### 改善したこと・解決したこと (Keep)

### 問題点・課題 (Problem)

### 次のアクション (Try)

----
Generated by Backlog Daily Report Generator AI

`,
        assigneeId: member.id,
        priorityId: 3,
        issueTypeId: APP_CONFIG.dailyReports.members[0].issueTypeId,
        dueDate: date.toISOString().split('T')[0],
        parentIssueId: member.parentIssueId ? member.parentIssueId : undefined,
    }).catch(e => {
        console.error(e)
        console.log(JSON.stringify(e._body, null, 2))
        throw e
    })
    console.log(generateIssueResult)
    return generateIssueResult
}

export const handler: Handler = async (event: any) => {
    const date = new Date()
    try {
        // SSM Parameter StoreからバックログのAPIキーを取得
        const getParameterCommand = new GetParameterCommand({
            Name: "/backlog-api-key",
            WithDecryption: true
        });
        
        const { Parameter } = await ssmClient.send(getParameterCommand);
        
        // SSMから取得する値は文字列なので、JSONとしてパースする必要がある
        const backlogApiKeyStr = Parameter?.Value;
        if (!backlogApiKeyStr) {
            throw new Error('APIキーが見つかりません');
        }
        
        // JSON文字列をパースしてオブジェクトに変換
        const backlogApiKey = JSON.parse(backlogApiKeyStr) as {
            API_KEY: string;
            HOST: string;
        } | undefined;

        if (!backlogApiKey) {
            throw new Error('APIキーが見つかりません');
        }
        const { API_KEY, HOST } = backlogApiKey;
                
        console.log("HOST:", HOST);
        const backlog = new backlogjs.Backlog({
            host: HOST,
            apiKey: API_KEY
        });
        const generateIssueResults = []
        for (const member of APP_CONFIG.dailyReports.members) {
            const generateIssueResult = await generateDailyReport(backlog, member, date)
            generateIssueResults.push(generateIssueResult)
        }

        return {
            statusCode: 200,
            output: generateIssueResults
        }
    } catch (error) {
        console.error('エラーが発生しました:', error);
        return {
            statusCode: 500,
            message: 'エラーが発生しました',
            error: error instanceof Error ? error.message : '不明なエラー'
        }
    }
}